{"version":3,"sources":["components/Chart/Chart.module.css","components/Cards/Cards.jsx","SentryConfig.js","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","components/ErrBtn.js","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","styles","container","className","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","sentryLogException","error","Sentry","scope","setTag","setLevel","setExtras","sentryUserLog","user","userData","id","username","setUser","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","setCountry","fetchCountryData","FormControl","NativeSelect","defaultValue","onChange","e","target","name","iso2","MyError","handleClick","onClick","this","Component","App","state","setState","Error","err","process","fetchedData","image","src","coronaImg","alt","React","dsn","release","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5959c6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Mf6ji\"};","import React from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\r\nimport Countup from 'react-countup';\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed) {\r\n        return 'Loading....';\r\n    }\r\n    console.log(styles.container);\r\n    return(\r\n       <div className={styles.container}>\r\n           <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <Countup start={0} end={confirmed.value} duration={2.5}\r\n                            separator=\",\" />\r\n                        </Typography> \r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography> \r\n                    </CardContent>\r\n                    </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recoverd\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <Countup start={0} end={recovered.value} duration={2.5}\r\n                            separator=\",\" /></Typography> \r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography> \r\n                    </CardContent>\r\n                    </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <Countup start={0} end={deaths.value} duration={2.5}\r\n                            separator=\",\" /></Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography> \r\n                    </CardContent>\r\n                    </Grid>                   \r\n            </Grid>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import * as Sentry from '@sentry/react';\r\n\r\n\r\nexport const sentryLogException = error =>{\r\n    Sentry.withScope(scope => {\r\n        scope.setTag(\"DATA-FETCH\", \"API CALL\");\r\n        scope.setLevel(\"warning\");\r\n        scope.setExtras(error);\r\n        Sentry.captureException(error);\r\n    })\r\n}\r\n\r\nexport const sentryUserLog = (error, user) =>{\r\n    const userData = {\r\n        id : user.id,\r\n        username : user.username\r\n    }\r\n    Sentry.withScope(scope => {\r\n        scope.setTag(\"custom-tag\", \"user-info-log\");\r\n        scope.setLevel(\"error\");\r\n        scope.setUser(userData);\r\n        Sentry.captureException(error);\r\n    })\r\n}","import axios from 'axios';\r\nimport { sentryLogException, sentryUserLog } from '../SentryConfig';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = country?`${url}/countries/${country}`:url;\r\n    try{\r\n        const {data : {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        const modifiedData = {confirmed,recovered,deaths,lastUpdate}\r\n        return modifiedData;\r\n    } catch (error) {\r\n       const user = {\r\n           id : \"test_id\",\r\n           username : \"Bhuwan\"\r\n       }\r\n       sentryUserLog(error, user);\r\n        // console.log(error);\r\n    }\r\n} \r\n\r\nexport const fetchDailyData = async() => {\r\n\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        const user = {\r\n            id : \"test_id\",\r\n            username : \"Bhuwan\"\r\n        }\r\n        sentryUserLog(error, user);\r\n        }\r\n}\r\nexport const fetchCountries = async ()=> {\r\n    try {\r\n        const {data : {countries}} = await axios.get(`${url}/countries`);\r\n        return countries;\r\n     } catch (error) {\r\n        const user = {\r\n            id : \"test_id\",\r\n            username : \"Bhuwan\"\r\n        }\r\n        sentryUserLog(error, user);\r\n        }\r\n\r\n    }\r\n","import React, {useEffect, useState} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data : {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        } \r\n        fetchAPI();\r\n    },[]);\r\nconsole.log(confirmed);\r\n    const barChart = (\r\n        confirmed?\r\n         <Bar\r\n         data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets : [{\r\n                label : 'People',\r\n                backgroundColor : [\r\n                    'rgba(0,0,255,0.5)',\r\n                    'rgba(0,255,0,0.5)',\r\n                    'rgba(255,0,0,0.5)'\r\n                ],\r\n                data : [confirmed.value, recovered.value, deaths.value]\r\n            }]\r\n         }}\r\n         options = {{\r\n             legend : {display:false},\r\n             title : { display :true, text: `Current state in ${country}`}\r\n         }}\r\n         />\r\n        : null\r\n    )\r\n     const lineChart = (\r\n        dailyData.length ?\r\n        <Line data ={{\r\n            labels: dailyData.map(({date}) => date),\r\n            datasets : [{\r\n                data : dailyData.map(({confirmed}) => confirmed),\r\n                label : 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill:true,\r\n            }, {\r\n                data : dailyData.map(({deaths}) => deaths),\r\n                label : 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgb(255,0,0,0.5)',\r\n                fill:true,\r\n            }],\r\n        }} /> : null\r\n    );\r\n    return(\r\n        <div className={styles.container}>\r\n            {country?barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useEffect, useState } from 'react';\r\nimport { FormControl, NativeSelect } from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [country, setCountry] = useState([]);\r\n\r\n    useEffect(() => {\r\n    const fetchCountryData = async () => {\r\n            setCountry(await fetchCountries());\r\n    }\r\n    fetchCountryData();\r\n    }, [setCountry]);\r\n\r\n return(\r\n        <FormControl>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>{handleCountryChange(e.target.value)}}>\r\n            <option key=\"0\" value=\"\">Global</option>;\r\n                {country.map((data)=>{\r\n                return <option key={data.iso2} value={data.name}>{data.name}</option>;\r\n                })}\r\n            </NativeSelect>\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { Component } from 'react';\r\nimport { sentryLogException } from '../SentryConfig';\r\n\r\nexport default class MyError extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.handleClick}\r\n        >\r\n          Error\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleClick = () => {\r\n    sentryLogException('Uncaught');\r\n  }\r\n}","import React from 'react';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components'\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImg from './images/image.png';\r\nimport * as Sentry from '@sentry/browser';\r\nimport MyError from './components/ErrBtn';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data : {},\r\n        country : '',\r\n        text : '',\r\n    }\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data : fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country)=>{\r\n        const data  = await  fetchData(country);\r\n        this.setState({data, country})\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({\r\n           text : \"Project Running\"\r\n        });\r\n        try {\r\n            throw new Error('Caught');\r\n          } catch (err) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n              return;\r\n            }\r\n            Sentry.captureException(err);\r\n        }\r\n    }\r\n    render() {\r\n        const {text} = this.state;\r\n        return (\r\n    <div className={styles.container}>\r\n        <div>\r\n        <button\r\n          onClick={this.handleClick}>\r\n          Check\r\n        </button>\r\n        <div>{text}</div>\r\n      </div>\r\n      <MyError/>\r\n                <img className={styles.image} src={coronaImg} alt=\"COVID-19\" />\r\n                <Cards data={this.state.data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={this.state.data} country={this.state.country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as Sentry from '@sentry/react';\r\nimport { Integrations } from '@sentry/tracing';\r\n\r\n\r\nSentry.init({\r\n    dsn: \"https://9d23be397fd145698354e96960b34590@o478459.ingest.sentry.io/5521031\",\r\n    release: \"0.1.0\",\r\n  integrations: [\r\n    new Integrations.BrowserTracing(),\r\n  ],\r\n\r\n  // We recommend adjusting this value in production, or using tracesSampler\r\n  // for finer control\r\n  tracesSampleRate: 1.0,\r\n})\r\n\r\nReactDOM.render(\r\n<App />, document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2ysTa\",\"card\":\"Cards_card__3NMx1\",\"infected\":\"Cards_infected__3Kdua\",\"recovered\":\"Cards_recovered__3gqn8\",\"deaths\":\"Cards_deaths__LR6UY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2rOvg\",\"image\":\"App_image__38V10\"};"],"sourceRoot":""}